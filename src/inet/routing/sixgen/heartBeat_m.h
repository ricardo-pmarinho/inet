//
// Generated file, do not edit! Created by nedtool 5.6 from inet/routing/sixgen/heartBeat.msg.
//

#ifndef __INET__WIRELESSROUTING_HEARTBEAT_M_H
#define __INET__WIRELESSROUTING_HEARTBEAT_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {
namespace wirelessrouting {

class HeartBeat;
class SNOOPHB;
class FLWEIGHT;
class DRONEMSG;
class ANTENNA;
class CHDEF;
class RESPHB;
class CAINMSG;
class Rrep;
class Rreq;
class Rerr;
class RrepAck;
class WaitForRrep;
class PacketHolderMessage;
struct UnreachableNode;
} // namespace wirelessrouting
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/common/packet/Packet_m.h" // import inet.common.packet.Packet

#include "inet/networklayer/common/L3Address_m.h" // import inet.networklayer.common.L3Address

#include "inet/common/geometry/Geometry_m.h" // import inet.common.geometry.Geometry

// cplusplus {{
//#include "inet/common/Units.h"
#include "inet/common/geometry/common/Coord.h"
// }}


namespace inet {
namespace wirelessrouting {

/**
 * Enum generated from <tt>inet/routing/sixgen/heartBeat.msg:35</tt> by nedtool.
 * <pre>
 * enum heartBeatType
 * {
 *     SNP = 1;
 *     RESP = 2;
 *     CAINREQ = 3;
 *     CAINRESP = 4;
 *     CAINFWD = 5;
 *     CAINHOP = 6;
 *     CAINERR = 7;
 *     CAINACK = 8;
 *     RREQ = 9;
 *     RREP = 10;
 *     SCMSG = 11;
 *     LAR = 12;
 *     SPR = 13;
 *     BRAP = 14;
 *     NEWFWD = 15;
 *     CAINREPLY = 16;
 *     HOPCOUNT = 17;
 *     ANTN = 18;
 *     WGHT = 19;
 *     LEACH = 20;
 *     DRONE = 21;
 *     SNP_IPv6 = 101;
 *     RESP_IPv6 = 102;
 *     CAINREQ_IPv6 = 103;
 *     CAINRESP_IPv6 = 104;
 *     CAINFWD_IPv6 = 105;
 *     CAINHOP_IPv6 = 106;
 *     CAINERR_IPv6 = 107;
 *     CAINACK_IPv6 = 108;
 *     RREQ_IPv6 = 109;
 *     RREP_IPv6 = 110;
 *     SCMSG_IPv6 = 111;
 *     LAR_IPv6 = 112;
 *     SPR_IPv6 = 113;
 *     BRAP_IPv6 = 114;
 *     NEWFWD_IPv6 = 115;
 *     CAINREPLY_IPv6 = 116;
 *     HOPCOUNT_IPv6 = 117;
 *     ANTN_IPv6 = 118;
 *     WGHT_IPv6 = 119;
 *     LEACH_IPv6 = 120;
 *     DRONE_IPv6 = 121;
 *     def = 99;
 * }
 * </pre>
 */
enum heartBeatType {
    SNP = 1,
    RESP = 2,
    CAINREQ = 3,
    CAINRESP = 4,
    CAINFWD = 5,
    CAINHOP = 6,
    CAINERR = 7,
    CAINACK = 8,
    RREQ = 9,
    RREP = 10,
    SCMSG = 11,
    LAR = 12,
    SPR = 13,
    BRAP = 14,
    NEWFWD = 15,
    CAINREPLY = 16,
    HOPCOUNT = 17,
    ANTN = 18,
    WGHT = 19,
    LEACH = 20,
    DRONE = 21,
    SNP_IPv6 = 101,
    RESP_IPv6 = 102,
    CAINREQ_IPv6 = 103,
    CAINRESP_IPv6 = 104,
    CAINFWD_IPv6 = 105,
    CAINHOP_IPv6 = 106,
    CAINERR_IPv6 = 107,
    CAINACK_IPv6 = 108,
    RREQ_IPv6 = 109,
    RREP_IPv6 = 110,
    SCMSG_IPv6 = 111,
    LAR_IPv6 = 112,
    SPR_IPv6 = 113,
    BRAP_IPv6 = 114,
    NEWFWD_IPv6 = 115,
    CAINREPLY_IPv6 = 116,
    HOPCOUNT_IPv6 = 117,
    ANTN_IPv6 = 118,
    WGHT_IPv6 = 119,
    LEACH_IPv6 = 120,
    DRONE_IPv6 = 121,
    def = 99
};

/**
 * Class generated from <tt>inet/routing/sixgen/heartBeat.msg:81</tt> by nedtool.
 * <pre>
 * class HeartBeat extends FieldsChunk
 * {
 *     heartBeatType packetType = static_cast<heartBeatType>(-1);       // packet type, stored in one byte
 * }
 * </pre>
 */
class INET_API HeartBeat : public ::inet::FieldsChunk
{
  protected:
    inet::wirelessrouting::heartBeatType packetType = static_cast<heartBeatType>(-1);

  private:
    void copy(const HeartBeat& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const HeartBeat&);

  public:
    HeartBeat();
    HeartBeat(const HeartBeat& other);
    virtual ~HeartBeat();
    HeartBeat& operator=(const HeartBeat& other);
    virtual HeartBeat *dup() const override {return new HeartBeat(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual inet::wirelessrouting::heartBeatType getPacketType() const;
    virtual void setPacketType(inet::wirelessrouting::heartBeatType packetType);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const HeartBeat& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, HeartBeat& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/routing/sixgen/heartBeat.msg:85</tt> by nedtool.
 * <pre>
 * class SNOOPHB extends HeartBeat
 * {
 *     // chunkLength = B(24) or B(48)
 *     // packetType = RREQ or RREQ_IPv6
 *     bool joinFlag;    // Join flag; reserved for multicast.
 *     bool repairFlag;    // Repair flag; reserved for multicast.
 *     bool gratuitousRREPFlag;    // Gratuitous RREP flag; indicates whether a gratuitous RREP should be unicast to the node specified in the Destination IP Address field
 *     bool twoHop;    // Flag for the node to know if the message is a two hop message in CH election
 *     bool unknownSeqNumFlag;    // Unknown sequence number; indicates the destination sequence number is unknown
 *     uint16_t reserved = 0;    // Sent as 0; ignored on reception.
 *     unsigned int hopCount;    // The number of hops from the Originator IP Address to the node handling the request.
 *     uint32_t rreqId;    // A sequence number uniquely identifying the particular RREQ when taken in conjunction with the originating node's IP address.
 *     L3Address destAddr;    // The IP address of the destination for which a route is desired.
 *     uint32_t destSeqNum;    // The latest sequence number received in the past by the originator for any route towards the destination.
 *     L3Address originatorAddr;    // The IP address of the node which originated the Route Request.
 *     uint32_t originatorSeqNum;    // The current sequence number to be used in the route entry pointing towards the originator of the route request.
 *     Coord msgCoord;
 *     uint32_t batteryPercent;
 *     L3Address neighbAddr; //address from the two hop node
 *     Coord neighbMsgCoord; //Coordinate from the two hop node
 *     uint32_t neighbBatteryPercent; //battery from the two hop node
 *     double chDist;//stores the distance between sender its CH
 *     string nodeName;
 * }
 * </pre>
 */
class INET_API SNOOPHB : public ::inet::wirelessrouting::HeartBeat
{
  protected:
    bool joinFlag = false;
    bool repairFlag = false;
    bool gratuitousRREPFlag = false;
    bool twoHop = false;
    bool unknownSeqNumFlag = false;
    uint16_t reserved = 0;
    unsigned int hopCount = 0;
    uint32_t rreqId = 0;
    L3Address destAddr;
    uint32_t destSeqNum = 0;
    L3Address originatorAddr;
    uint32_t originatorSeqNum = 0;
    Coord msgCoord;
    uint32_t batteryPercent = 0;
    L3Address neighbAddr;
    Coord neighbMsgCoord;
    uint32_t neighbBatteryPercent = 0;
    double chDist = 0;
    omnetpp::opp_string nodeName;

  private:
    void copy(const SNOOPHB& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SNOOPHB&);

  public:
    SNOOPHB();
    SNOOPHB(const SNOOPHB& other);
    virtual ~SNOOPHB();
    SNOOPHB& operator=(const SNOOPHB& other);
    virtual SNOOPHB *dup() const override {return new SNOOPHB(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual bool getJoinFlag() const;
    virtual void setJoinFlag(bool joinFlag);
    virtual bool getRepairFlag() const;
    virtual void setRepairFlag(bool repairFlag);
    virtual bool getGratuitousRREPFlag() const;
    virtual void setGratuitousRREPFlag(bool gratuitousRREPFlag);
    virtual bool getTwoHop() const;
    virtual void setTwoHop(bool twoHop);
    virtual bool getUnknownSeqNumFlag() const;
    virtual void setUnknownSeqNumFlag(bool unknownSeqNumFlag);
    virtual uint16_t getReserved() const;
    virtual void setReserved(uint16_t reserved);
    virtual unsigned int getHopCount() const;
    virtual void setHopCount(unsigned int hopCount);
    virtual uint32_t getRreqId() const;
    virtual void setRreqId(uint32_t rreqId);
    virtual const L3Address& getDestAddr() const;
    virtual L3Address& getDestAddrForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<SNOOPHB*>(this)->getDestAddr());}
    virtual void setDestAddr(const L3Address& destAddr);
    virtual uint32_t getDestSeqNum() const;
    virtual void setDestSeqNum(uint32_t destSeqNum);
    virtual const L3Address& getOriginatorAddr() const;
    virtual L3Address& getOriginatorAddrForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<SNOOPHB*>(this)->getOriginatorAddr());}
    virtual void setOriginatorAddr(const L3Address& originatorAddr);
    virtual uint32_t getOriginatorSeqNum() const;
    virtual void setOriginatorSeqNum(uint32_t originatorSeqNum);
    virtual const Coord& getMsgCoord() const;
    virtual Coord& getMsgCoordForUpdate() { handleChange();return const_cast<Coord&>(const_cast<SNOOPHB*>(this)->getMsgCoord());}
    virtual void setMsgCoord(const Coord& msgCoord);
    virtual uint32_t getBatteryPercent() const;
    virtual void setBatteryPercent(uint32_t batteryPercent);
    virtual const L3Address& getNeighbAddr() const;
    virtual L3Address& getNeighbAddrForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<SNOOPHB*>(this)->getNeighbAddr());}
    virtual void setNeighbAddr(const L3Address& neighbAddr);
    virtual const Coord& getNeighbMsgCoord() const;
    virtual Coord& getNeighbMsgCoordForUpdate() { handleChange();return const_cast<Coord&>(const_cast<SNOOPHB*>(this)->getNeighbMsgCoord());}
    virtual void setNeighbMsgCoord(const Coord& neighbMsgCoord);
    virtual uint32_t getNeighbBatteryPercent() const;
    virtual void setNeighbBatteryPercent(uint32_t neighbBatteryPercent);
    virtual double getChDist() const;
    virtual void setChDist(double chDist);
    virtual const char * getNodeName() const;
    virtual void setNodeName(const char * nodeName);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SNOOPHB& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SNOOPHB& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/routing/sixgen/heartBeat.msg:109</tt> by nedtool.
 * <pre>
 * class FLWEIGHT extends HeartBeat
 * {
 *     L3Address destAddr;
 *     L3Address sourceAddr;
 *     float w11;
 *     float w12;
 *     float w13;
 *     float w21;
 *     float w22;
 *     float w23;
 *     float w31;
 *     float w32;
 *     float w33;
 *     float wo1;
 *     float wo2;
 *     float wo3;
 * }
 * </pre>
 */
class INET_API FLWEIGHT : public ::inet::wirelessrouting::HeartBeat
{
  protected:
    L3Address destAddr;
    L3Address sourceAddr;
    float w11 = 0;
    float w12 = 0;
    float w13 = 0;
    float w21 = 0;
    float w22 = 0;
    float w23 = 0;
    float w31 = 0;
    float w32 = 0;
    float w33 = 0;
    float wo1 = 0;
    float wo2 = 0;
    float wo3 = 0;

  private:
    void copy(const FLWEIGHT& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const FLWEIGHT&);

  public:
    FLWEIGHT();
    FLWEIGHT(const FLWEIGHT& other);
    virtual ~FLWEIGHT();
    FLWEIGHT& operator=(const FLWEIGHT& other);
    virtual FLWEIGHT *dup() const override {return new FLWEIGHT(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const L3Address& getDestAddr() const;
    virtual L3Address& getDestAddrForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<FLWEIGHT*>(this)->getDestAddr());}
    virtual void setDestAddr(const L3Address& destAddr);
    virtual const L3Address& getSourceAddr() const;
    virtual L3Address& getSourceAddrForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<FLWEIGHT*>(this)->getSourceAddr());}
    virtual void setSourceAddr(const L3Address& sourceAddr);
    virtual float getW11() const;
    virtual void setW11(float w11);
    virtual float getW12() const;
    virtual void setW12(float w12);
    virtual float getW13() const;
    virtual void setW13(float w13);
    virtual float getW21() const;
    virtual void setW21(float w21);
    virtual float getW22() const;
    virtual void setW22(float w22);
    virtual float getW23() const;
    virtual void setW23(float w23);
    virtual float getW31() const;
    virtual void setW31(float w31);
    virtual float getW32() const;
    virtual void setW32(float w32);
    virtual float getW33() const;
    virtual void setW33(float w33);
    virtual float getWo1() const;
    virtual void setWo1(float wo1);
    virtual float getWo2() const;
    virtual void setWo2(float wo2);
    virtual float getWo3() const;
    virtual void setWo3(float wo3);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const FLWEIGHT& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, FLWEIGHT& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/routing/sixgen/heartBeat.msg:126</tt> by nedtool.
 * <pre>
 * class DRONEMSG extends HeartBeat
 * {
 *     unsigned int hopCount;
 *     L3Address destAddr;
 *     L3Address sourceAddr;
 *     Coord senderCoord;
 * }
 * </pre>
 */
class INET_API DRONEMSG : public ::inet::wirelessrouting::HeartBeat
{
  protected:
    unsigned int hopCount = 0;
    L3Address destAddr;
    L3Address sourceAddr;
    Coord senderCoord;

  private:
    void copy(const DRONEMSG& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DRONEMSG&);

  public:
    DRONEMSG();
    DRONEMSG(const DRONEMSG& other);
    virtual ~DRONEMSG();
    DRONEMSG& operator=(const DRONEMSG& other);
    virtual DRONEMSG *dup() const override {return new DRONEMSG(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned int getHopCount() const;
    virtual void setHopCount(unsigned int hopCount);
    virtual const L3Address& getDestAddr() const;
    virtual L3Address& getDestAddrForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<DRONEMSG*>(this)->getDestAddr());}
    virtual void setDestAddr(const L3Address& destAddr);
    virtual const L3Address& getSourceAddr() const;
    virtual L3Address& getSourceAddrForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<DRONEMSG*>(this)->getSourceAddr());}
    virtual void setSourceAddr(const L3Address& sourceAddr);
    virtual const Coord& getSenderCoord() const;
    virtual Coord& getSenderCoordForUpdate() { handleChange();return const_cast<Coord&>(const_cast<DRONEMSG*>(this)->getSenderCoord());}
    virtual void setSenderCoord(const Coord& senderCoord);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DRONEMSG& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DRONEMSG& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/routing/sixgen/heartBeat.msg:133</tt> by nedtool.
 * <pre>
 * class ANTENNA extends HeartBeat
 * {
 *     unsigned int hopCount;
 *     L3Address destAddr;
 *     L3Address sourceAddr;
 * }
 * </pre>
 */
class INET_API ANTENNA : public ::inet::wirelessrouting::HeartBeat
{
  protected:
    unsigned int hopCount = 0;
    L3Address destAddr;
    L3Address sourceAddr;

  private:
    void copy(const ANTENNA& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ANTENNA&);

  public:
    ANTENNA();
    ANTENNA(const ANTENNA& other);
    virtual ~ANTENNA();
    ANTENNA& operator=(const ANTENNA& other);
    virtual ANTENNA *dup() const override {return new ANTENNA(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned int getHopCount() const;
    virtual void setHopCount(unsigned int hopCount);
    virtual const L3Address& getDestAddr() const;
    virtual L3Address& getDestAddrForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<ANTENNA*>(this)->getDestAddr());}
    virtual void setDestAddr(const L3Address& destAddr);
    virtual const L3Address& getSourceAddr() const;
    virtual L3Address& getSourceAddrForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<ANTENNA*>(this)->getSourceAddr());}
    virtual void setSourceAddr(const L3Address& sourceAddr);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ANTENNA& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ANTENNA& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/routing/sixgen/heartBeat.msg:139</tt> by nedtool.
 * <pre>
 * class CHDEF extends HeartBeat
 * {
 *     L3Address sourceAddr;
 *     Coord senderCoord;
 * }
 * </pre>
 */
class INET_API CHDEF : public ::inet::wirelessrouting::HeartBeat
{
  protected:
    L3Address sourceAddr;
    Coord senderCoord;

  private:
    void copy(const CHDEF& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CHDEF&);

  public:
    CHDEF();
    CHDEF(const CHDEF& other);
    virtual ~CHDEF();
    CHDEF& operator=(const CHDEF& other);
    virtual CHDEF *dup() const override {return new CHDEF(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const L3Address& getSourceAddr() const;
    virtual L3Address& getSourceAddrForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<CHDEF*>(this)->getSourceAddr());}
    virtual void setSourceAddr(const L3Address& sourceAddr);
    virtual const Coord& getSenderCoord() const;
    virtual Coord& getSenderCoordForUpdate() { handleChange();return const_cast<Coord&>(const_cast<CHDEF*>(this)->getSenderCoord());}
    virtual void setSenderCoord(const Coord& senderCoord);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CHDEF& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CHDEF& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/routing/sixgen/heartBeat.msg:144</tt> by nedtool.
 * <pre>
 * class RESPHB extends HeartBeat
 * {
 *     unsigned int hopCount;
 *     L3Address destAddr;
 *     L3Address sourceAddr;
 *     L3Address chAddr;
 *     L3Address originatorAddr;
 *     uint32_t batteryPercent;
 *     Coord senderCoord;
 * }
 * </pre>
 */
class INET_API RESPHB : public ::inet::wirelessrouting::HeartBeat
{
  protected:
    unsigned int hopCount = 0;
    L3Address destAddr;
    L3Address sourceAddr;
    L3Address chAddr;
    L3Address originatorAddr;
    uint32_t batteryPercent = 0;
    Coord senderCoord;

  private:
    void copy(const RESPHB& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RESPHB&);

  public:
    RESPHB();
    RESPHB(const RESPHB& other);
    virtual ~RESPHB();
    RESPHB& operator=(const RESPHB& other);
    virtual RESPHB *dup() const override {return new RESPHB(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned int getHopCount() const;
    virtual void setHopCount(unsigned int hopCount);
    virtual const L3Address& getDestAddr() const;
    virtual L3Address& getDestAddrForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<RESPHB*>(this)->getDestAddr());}
    virtual void setDestAddr(const L3Address& destAddr);
    virtual const L3Address& getSourceAddr() const;
    virtual L3Address& getSourceAddrForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<RESPHB*>(this)->getSourceAddr());}
    virtual void setSourceAddr(const L3Address& sourceAddr);
    virtual const L3Address& getChAddr() const;
    virtual L3Address& getChAddrForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<RESPHB*>(this)->getChAddr());}
    virtual void setChAddr(const L3Address& chAddr);
    virtual const L3Address& getOriginatorAddr() const;
    virtual L3Address& getOriginatorAddrForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<RESPHB*>(this)->getOriginatorAddr());}
    virtual void setOriginatorAddr(const L3Address& originatorAddr);
    virtual uint32_t getBatteryPercent() const;
    virtual void setBatteryPercent(uint32_t batteryPercent);
    virtual const Coord& getSenderCoord() const;
    virtual Coord& getSenderCoordForUpdate() { handleChange();return const_cast<Coord&>(const_cast<RESPHB*>(this)->getSenderCoord());}
    virtual void setSenderCoord(const Coord& senderCoord);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RESPHB& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RESPHB& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/routing/sixgen/heartBeat.msg:154</tt> by nedtool.
 * <pre>
 * class CAINMSG extends HeartBeat
 * {
 *     unsigned int hopCount;
 *     L3Address destAddr;
 *     L3Address cainDestAddr;
 *     L3Address originatorAddr;
 *     L3Address sourceAddr;
 *     L3Address chAddr;
 *     L3Address lastAddr;
 *     L3Address rrepSource;
 *     heartBeatType ackType = static_cast<heartBeatType>(-1);
 *     uint32_t ackSeqNum;
 *     uint32_t seqNum;
 *     uint32_t batteryPercent;
 *     uint32_t chBattery;
 *     Coord senderCoord;
 *     uint32_t sprayQtdNeigh;
 *     uint32_t centrality;
 *     unsigned int hops;
 *     string msgId;
 *     double distance;//stores the distance between sender and receiver (necessary?)
 *     simtime_t timeInit;
 * }
 * </pre>
 */
class INET_API CAINMSG : public ::inet::wirelessrouting::HeartBeat
{
  protected:
    unsigned int hopCount = 0;
    L3Address destAddr;
    L3Address cainDestAddr;
    L3Address originatorAddr;
    L3Address sourceAddr;
    L3Address chAddr;
    L3Address lastAddr;
    L3Address rrepSource;
    inet::wirelessrouting::heartBeatType ackType = static_cast<heartBeatType>(-1);
    uint32_t ackSeqNum = 0;
    uint32_t seqNum = 0;
    uint32_t batteryPercent = 0;
    uint32_t chBattery = 0;
    Coord senderCoord;
    uint32_t sprayQtdNeigh = 0;
    uint32_t centrality = 0;
    unsigned int hops = 0;
    omnetpp::opp_string msgId;
    double distance = 0;
    omnetpp::simtime_t timeInit = SIMTIME_ZERO;

  private:
    void copy(const CAINMSG& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CAINMSG&);

  public:
    CAINMSG();
    CAINMSG(const CAINMSG& other);
    virtual ~CAINMSG();
    CAINMSG& operator=(const CAINMSG& other);
    virtual CAINMSG *dup() const override {return new CAINMSG(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned int getHopCount() const;
    virtual void setHopCount(unsigned int hopCount);
    virtual const L3Address& getDestAddr() const;
    virtual L3Address& getDestAddrForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<CAINMSG*>(this)->getDestAddr());}
    virtual void setDestAddr(const L3Address& destAddr);
    virtual const L3Address& getCainDestAddr() const;
    virtual L3Address& getCainDestAddrForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<CAINMSG*>(this)->getCainDestAddr());}
    virtual void setCainDestAddr(const L3Address& cainDestAddr);
    virtual const L3Address& getOriginatorAddr() const;
    virtual L3Address& getOriginatorAddrForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<CAINMSG*>(this)->getOriginatorAddr());}
    virtual void setOriginatorAddr(const L3Address& originatorAddr);
    virtual const L3Address& getSourceAddr() const;
    virtual L3Address& getSourceAddrForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<CAINMSG*>(this)->getSourceAddr());}
    virtual void setSourceAddr(const L3Address& sourceAddr);
    virtual const L3Address& getChAddr() const;
    virtual L3Address& getChAddrForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<CAINMSG*>(this)->getChAddr());}
    virtual void setChAddr(const L3Address& chAddr);
    virtual const L3Address& getLastAddr() const;
    virtual L3Address& getLastAddrForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<CAINMSG*>(this)->getLastAddr());}
    virtual void setLastAddr(const L3Address& lastAddr);
    virtual const L3Address& getRrepSource() const;
    virtual L3Address& getRrepSourceForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<CAINMSG*>(this)->getRrepSource());}
    virtual void setRrepSource(const L3Address& rrepSource);
    virtual inet::wirelessrouting::heartBeatType getAckType() const;
    virtual void setAckType(inet::wirelessrouting::heartBeatType ackType);
    virtual uint32_t getAckSeqNum() const;
    virtual void setAckSeqNum(uint32_t ackSeqNum);
    virtual uint32_t getSeqNum() const;
    virtual void setSeqNum(uint32_t seqNum);
    virtual uint32_t getBatteryPercent() const;
    virtual void setBatteryPercent(uint32_t batteryPercent);
    virtual uint32_t getChBattery() const;
    virtual void setChBattery(uint32_t chBattery);
    virtual const Coord& getSenderCoord() const;
    virtual Coord& getSenderCoordForUpdate() { handleChange();return const_cast<Coord&>(const_cast<CAINMSG*>(this)->getSenderCoord());}
    virtual void setSenderCoord(const Coord& senderCoord);
    virtual uint32_t getSprayQtdNeigh() const;
    virtual void setSprayQtdNeigh(uint32_t sprayQtdNeigh);
    virtual uint32_t getCentrality() const;
    virtual void setCentrality(uint32_t centrality);
    virtual unsigned int getHops() const;
    virtual void setHops(unsigned int hops);
    virtual const char * getMsgId() const;
    virtual void setMsgId(const char * msgId);
    virtual double getDistance() const;
    virtual void setDistance(double distance);
    virtual omnetpp::simtime_t getTimeInit() const;
    virtual void setTimeInit(omnetpp::simtime_t timeInit);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CAINMSG& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CAINMSG& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/routing/sixgen/heartBeat.msg:177</tt> by nedtool.
 * <pre>
 * class Rrep extends HeartBeat
 * {
 *     unsigned int heartBeatType = 99;
 *     unsigned int hopCount;
 *     unsigned int rreqId;
 *     L3Address destAddr;
 *     unsigned int destSeqNum;
 *     L3Address originatorAddr;
 *     unsigned int originatorSeqNum;
 * }
 * </pre>
 */
class INET_API Rrep : public ::inet::wirelessrouting::HeartBeat
{
  protected:
    unsigned int heartBeatType = 99;
    unsigned int hopCount = 0;
    unsigned int rreqId = 0;
    L3Address destAddr;
    unsigned int destSeqNum = 0;
    L3Address originatorAddr;
    unsigned int originatorSeqNum = 0;

  private:
    void copy(const Rrep& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Rrep&);

  public:
    Rrep();
    Rrep(const Rrep& other);
    virtual ~Rrep();
    Rrep& operator=(const Rrep& other);
    virtual Rrep *dup() const override {return new Rrep(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned int getHeartBeatType() const;
    virtual void setHeartBeatType(unsigned int heartBeatType);
    virtual unsigned int getHopCount() const;
    virtual void setHopCount(unsigned int hopCount);
    virtual unsigned int getRreqId() const;
    virtual void setRreqId(unsigned int rreqId);
    virtual const L3Address& getDestAddr() const;
    virtual L3Address& getDestAddrForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<Rrep*>(this)->getDestAddr());}
    virtual void setDestAddr(const L3Address& destAddr);
    virtual unsigned int getDestSeqNum() const;
    virtual void setDestSeqNum(unsigned int destSeqNum);
    virtual const L3Address& getOriginatorAddr() const;
    virtual L3Address& getOriginatorAddrForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<Rrep*>(this)->getOriginatorAddr());}
    virtual void setOriginatorAddr(const L3Address& originatorAddr);
    virtual unsigned int getOriginatorSeqNum() const;
    virtual void setOriginatorSeqNum(unsigned int originatorSeqNum);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Rrep& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Rrep& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/routing/sixgen/heartBeat.msg:187</tt> by nedtool.
 * <pre>
 * class Rreq extends HeartBeat
 * {
 *     unsigned int heartBeatType = 99;
 *     unsigned int hopCount;
 *     unsigned int rreqId;
 *     L3Address destAddr;
 *     unsigned int destSeqNum;
 *     L3Address originatorAddr;
 *     unsigned int originatorSeqNum;
 * }
 * </pre>
 */
class INET_API Rreq : public ::inet::wirelessrouting::HeartBeat
{
  protected:
    unsigned int heartBeatType = 99;
    unsigned int hopCount = 0;
    unsigned int rreqId = 0;
    L3Address destAddr;
    unsigned int destSeqNum = 0;
    L3Address originatorAddr;
    unsigned int originatorSeqNum = 0;

  private:
    void copy(const Rreq& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Rreq&);

  public:
    Rreq();
    Rreq(const Rreq& other);
    virtual ~Rreq();
    Rreq& operator=(const Rreq& other);
    virtual Rreq *dup() const override {return new Rreq(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned int getHeartBeatType() const;
    virtual void setHeartBeatType(unsigned int heartBeatType);
    virtual unsigned int getHopCount() const;
    virtual void setHopCount(unsigned int hopCount);
    virtual unsigned int getRreqId() const;
    virtual void setRreqId(unsigned int rreqId);
    virtual const L3Address& getDestAddr() const;
    virtual L3Address& getDestAddrForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<Rreq*>(this)->getDestAddr());}
    virtual void setDestAddr(const L3Address& destAddr);
    virtual unsigned int getDestSeqNum() const;
    virtual void setDestSeqNum(unsigned int destSeqNum);
    virtual const L3Address& getOriginatorAddr() const;
    virtual L3Address& getOriginatorAddrForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<Rreq*>(this)->getOriginatorAddr());}
    virtual void setOriginatorAddr(const L3Address& originatorAddr);
    virtual unsigned int getOriginatorSeqNum() const;
    virtual void setOriginatorSeqNum(unsigned int originatorSeqNum);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Rreq& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Rreq& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/routing/sixgen/heartBeat.msg:201</tt> by nedtool.
 * <pre>
 * //
 * // Represents an AODV Route Error
 * //
 * class Rerr extends HeartBeat
 * {
 *     // chunkLength = B(4 + N * (4+4)) or B(4 + N * (4+16))
 *     // packetType = RERR or RERR_IPv6
 *     bool noDeleteFlag;    // No delete flag; set when a node has performed a local repair of a link, and upstream nodes should not delete the route.
 *     uint16_t reserved = 0;    // Sent as 0; ignored on reception.
 *     UnreachableNode unreachableNodes[];    // The unreachable destinations included in the message; MUST be at least 1.
 * }
 * </pre>
 */
class INET_API Rerr : public ::inet::wirelessrouting::HeartBeat
{
  protected:
    bool noDeleteFlag = false;
    uint16_t reserved = 0;
    UnreachableNode *unreachableNodes = nullptr;
    size_t unreachableNodes_arraysize = 0;

  private:
    void copy(const Rerr& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Rerr&);

  public:
    Rerr();
    Rerr(const Rerr& other);
    virtual ~Rerr();
    Rerr& operator=(const Rerr& other);
    virtual Rerr *dup() const override {return new Rerr(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual bool getNoDeleteFlag() const;
    virtual void setNoDeleteFlag(bool noDeleteFlag);
    virtual uint16_t getReserved() const;
    virtual void setReserved(uint16_t reserved);
    virtual void setUnreachableNodesArraySize(size_t size);
    virtual size_t getUnreachableNodesArraySize() const;
    virtual const UnreachableNode& getUnreachableNodes(size_t k) const;
    virtual UnreachableNode& getUnreachableNodesForUpdate(size_t k) { handleChange();return const_cast<UnreachableNode&>(const_cast<Rerr*>(this)->getUnreachableNodes(k));}
    virtual void setUnreachableNodes(size_t k, const UnreachableNode& unreachableNodes);
    virtual void insertUnreachableNodes(const UnreachableNode& unreachableNodes);
    virtual void insertUnreachableNodes(size_t k, const UnreachableNode& unreachableNodes);
    virtual void eraseUnreachableNodes(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Rerr& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Rerr& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/routing/sixgen/heartBeat.msg:209</tt> by nedtool.
 * <pre>
 * class RrepAck extends HeartBeat
 * {
 *     unsigned int heartBeatType = 99;
 *     unsigned int hopCount;
 *     unsigned int rreqId;
 *     L3Address destAddr;
 *     unsigned int destSeqNum;
 *     L3Address originatorAddr;
 *     unsigned int originatorSeqNum;
 * }
 * </pre>
 */
class INET_API RrepAck : public ::inet::wirelessrouting::HeartBeat
{
  protected:
    unsigned int heartBeatType = 99;
    unsigned int hopCount = 0;
    unsigned int rreqId = 0;
    L3Address destAddr;
    unsigned int destSeqNum = 0;
    L3Address originatorAddr;
    unsigned int originatorSeqNum = 0;

  private:
    void copy(const RrepAck& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RrepAck&);

  public:
    RrepAck();
    RrepAck(const RrepAck& other);
    virtual ~RrepAck();
    RrepAck& operator=(const RrepAck& other);
    virtual RrepAck *dup() const override {return new RrepAck(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned int getHeartBeatType() const;
    virtual void setHeartBeatType(unsigned int heartBeatType);
    virtual unsigned int getHopCount() const;
    virtual void setHopCount(unsigned int hopCount);
    virtual unsigned int getRreqId() const;
    virtual void setRreqId(unsigned int rreqId);
    virtual const L3Address& getDestAddr() const;
    virtual L3Address& getDestAddrForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<RrepAck*>(this)->getDestAddr());}
    virtual void setDestAddr(const L3Address& destAddr);
    virtual unsigned int getDestSeqNum() const;
    virtual void setDestSeqNum(unsigned int destSeqNum);
    virtual const L3Address& getOriginatorAddr() const;
    virtual L3Address& getOriginatorAddrForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<RrepAck*>(this)->getOriginatorAddr());}
    virtual void setOriginatorAddr(const L3Address& originatorAddr);
    virtual unsigned int getOriginatorSeqNum() const;
    virtual void setOriginatorSeqNum(unsigned int originatorSeqNum);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RrepAck& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RrepAck& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/routing/sixgen/heartBeat.msg:223</tt> by nedtool.
 * <pre>
 * //
 * // Represents an internal timer for a Route Reply packet in Aodv module
 * //
 * message WaitForRrep
 * {
 *     L3Address destAddr;
 *     unsigned int lastTTL;
 *     bool fromInvalidEntry;
 * }
 * </pre>
 */
class INET_API WaitForRrep : public ::omnetpp::cMessage
{
  protected:
    L3Address destAddr;
    unsigned int lastTTL = 0;
    bool fromInvalidEntry = false;

  private:
    void copy(const WaitForRrep& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WaitForRrep&);

  public:
    WaitForRrep(const char *name=nullptr, short kind=0);
    WaitForRrep(const WaitForRrep& other);
    virtual ~WaitForRrep();
    WaitForRrep& operator=(const WaitForRrep& other);
    virtual WaitForRrep *dup() const override {return new WaitForRrep(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const L3Address& getDestAddr() const;
    virtual L3Address& getDestAddrForUpdate() { return const_cast<L3Address&>(const_cast<WaitForRrep*>(this)->getDestAddr());}
    virtual void setDestAddr(const L3Address& destAddr);
    virtual unsigned int getLastTTL() const;
    virtual void setLastTTL(unsigned int lastTTL);
    virtual bool getFromInvalidEntry() const;
    virtual void setFromInvalidEntry(bool fromInvalidEntry);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WaitForRrep& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WaitForRrep& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/routing/sixgen/heartBeat.msg:234</tt> by nedtool.
 * <pre>
 * //
 * // Represents a timer for delayed sending
 * //
 * message PacketHolderMessage
 * {
 *     Packet *ownedPacket \@owned;
 * }
 * </pre>
 */
class INET_API PacketHolderMessage : public ::omnetpp::cMessage
{
  protected:
    Packet * ownedPacket = nullptr;

  private:
    void copy(const PacketHolderMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PacketHolderMessage&);

  public:
    PacketHolderMessage(const char *name=nullptr, short kind=0);
    PacketHolderMessage(const PacketHolderMessage& other);
    virtual ~PacketHolderMessage();
    PacketHolderMessage& operator=(const PacketHolderMessage& other);
    virtual PacketHolderMessage *dup() const override {return new PacketHolderMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const Packet * getOwnedPacket() const;
    virtual Packet * getOwnedPacketForUpdate() { return const_cast<Packet *>(const_cast<PacketHolderMessage*>(this)->getOwnedPacket());}
    virtual Packet * dropOwnedPacket();
    virtual void setOwnedPacket(Packet * ownedPacket);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PacketHolderMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PacketHolderMessage& obj) {obj.parsimUnpack(b);}

/**
 * Struct generated from inet/routing/sixgen/heartBeat.msg:238 by nedtool.
 */
struct INET_API UnreachableNode
{
    UnreachableNode();
    L3Address addr;
    uint32_t seqNum;
};

// helpers for local use
void INET_API __doPacking(omnetpp::cCommBuffer *b, const UnreachableNode& a);
void INET_API __doUnpacking(omnetpp::cCommBuffer *b, UnreachableNode& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const UnreachableNode& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, UnreachableNode& obj) { __doUnpacking(b, obj); }

} // namespace wirelessrouting
} // namespace inet

#endif // ifndef __INET__WIRELESSROUTING_HEARTBEAT_M_H

