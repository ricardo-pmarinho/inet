[General]
record-eventlog = false
num-rngs = 3
**.mobility.rng-0 = 1
**.wlan[*].mac.rng-0 = 2
tkenv-plugin-path = ../../../etc/plugins
# channel physical parameters
**.wlan[*].typename = "AckingWirelessInterface"
#**.wlan[*].bitrate = 2Mbps
**.wlan[*].mac.headerLength = 23B
**.wlan[*].radio.typename = "UnitDiskRadio"
**.wlan[*].radio.transmitter.headerLength = 96b
**.wlan[*].radio.transmitter.interferenceRange = 10m
**.wlan[*].radio.transmitter.detectionRange = 10m
**.wlan[*].radio.receiver.ignoreInterference = false

# lifecycle
**.hasStatus = true

[Config simpleNetwork]
network = inet.examples.sixgen.simpleNetwork
repeat = 35
seed-set = ${repetition}
**.networkType = ${net="CAIN"} #CAIN EECRM LAR SC SPRAY BRAP
*.numHost = ${nHost=60..100 step 10}
*.numOfSats = 6
*.numAntenna = 0
*.numDrone = 15
*.sprayFraction = 2
**.updateInterval = 20s   # Interval to update the satellite positions on the map

# visualizer settings
#*.visualizer.*.radioVisualizer.displayRadios = true
#*.visualizer.*.radioVisualizer.displayAntennaLobes = true
#*.visualizer.*.radioVisualizer.radioFilter = "*.source**"
#*.visualizer.*.dataLinkVisualizer.displayLinks = true

# ping app settings
*.antenna[*].numApps = 1
*.antenna[*].app[0].typename = "PingApp"
*.antenna[*].app[0].destAddr = "*"
*.antenna[*].app[0].sendInterval = 0.5s

**.wlan[*].mac.typename="BMac"

#########antenna parameters
*.antenna[*].wlan[*].radio.antenna.typename = "ParabolicAntenna"
*.antenna[*].wlan[*].radio.antenna.beamWidth = 30deg
*.antenna[*].wlan[*].radio.antenna.minGain = 18dB
*.antenna[*].wlan[*].radio.antenna.maxGain = -50dB


###### radium parameters
*.physicalEnvironment.config = xmldoc("walls.xml")

*.radioMedium.propagation.typename = "ConstantSpeedPropagation"
*.radioMedium.propagation.propagationSpeed = 299792458 mps
*.radioMedium.pathLoss.typename = "LogNormalShadowing"
*.radioMedium.pathLoss.sigma = 1.1
*.radioMedium.obstacleLoss.typename = "DielectricObstacleLoss"
#*.radioMedium.backgroundNoise.typename = "IsotropicScalarBackgroundNoise"
#*.radioMedium.backgroundNoise.power = -110 dBm
#*.radioMedium.analogModel.typename = "ScalarAnalogModel"

**.wlan[*].bitrate = 1Tbps
**.rl_type = ${rlType="Euclidean1"} #Euclidean1 Euclidean2 Euclidean3 Hop1 Hop2 Hop3
**.alphaRl =  0.5
**.backoffEnabled = ${back=true}
**.mlEnable = ${mlEnable=false}
**.mlThreshold = ${mlThresh=1500}
*.host[*].routing.batteryThresh = 50
*.host[*].routing.powerThresh  = 10

#sim-time-limit = ${time=60}s

output-scalar-file = ${resultdir}/${configname}/${runnumber}-${nHost}-${repetition}.sca
#output-vector-file = ${resultdir}/${configname}/${runnumber}-${mlEnable}-${nHost}-${repetition}.vec
**.vector-recording = false

*.host[*].wlan[*].radio.transmitter.communicationRange = 500m#${hostCom=10..50 step 10}m
*.drone[*].wlan[*].radio.transmitter.communicationRange = 500m#${hostDrone=50..100 step 10}m
*.satellite[*].wlan[*].radio.transmitter.communicationRange = 500m#${hostSta=500..1000 step 100}m
#**.wlan[*].radio.transmitter.communicationRange = ${com=50}m
# visualizer
*.visualizer.energyStorageVisualizer.displayEnergyStorages = true
# ping app (host[0] pinged by others)
*.host[*].numApps = 1
*.host[*].app[0].typename = "PingApp"
*.host[*].app[0].startTime = uniform(1s,5s)
*.host[*].app[0].printPing = true
**.host[*].app[0].destAddr = "*"

# power
*.host[*].energyStorage.typename = "SimpleEpEnergyStorage"
*.host[*].wlan[*].radio.energyConsumer.typename = "StateBasedEpEnergyConsumer"
*.host[*].energyManagement.typename = "SimpleEpEnergyManagement"
*.host[*].energyStorage.nominalCapacity = 1J
*.host[*].energyManagement.nodeShutdownCapacity = 0#0.1 * energyStorage.nominalCapacity
*.host[*].energyManagement.nodeStartCapacity = 0.5 * energyStorage.nominalCapacity
*.host[*].energyStorage.initialCapacity = uniform(${0.7} * energyStorage.nominalCapacity, energyStorage.nominalCapacity)
*.host[*].energyGenerator.typename = "AlternatingEpEnergyGenerator"
*.host[*].energyGenerator.powerGeneration = 0mW
*.host[*].energyGenerator.sleepInterval = exponential(25s)
*.host[*].energyGenerator.generationInterval = exponential(25s)


*.host*.wlan[*].radio.energyConsumer.offPowerConsumption = 0mW
*.host*.wlan[*].radio.energyConsumer.sleepPowerConsumption = 1mW
*.host*.wlan[*].radio.energyConsumer.switchingPowerConsumption = 1mW
*.host*.wlan[*].radio.energyConsumer.receiverIdlePowerConsumption = 2mW
*.host*.wlan[*].radio.energyConsumer.receiverBusyPowerConsumption = 5mW
*.host*.wlan[*].radio.energyConsumer.receiverReceivingPowerConsumption = 10mW
*.host*.wlan[*].radio.energyConsumer.transmitterIdlePowerConsumption = 2mW
*.host*.wlan[*].radio.energyConsumer.transmitterTransmittingPowerConsumption = 100mW


*.antenna[*].energyStorage.typename = "SimpleEpEnergyStorage"
*.antenna[*].wlan[*].radio.energyConsumer.typename = "StateBasedEpEnergyConsumer"
*.antenna[*].energyManagement.typename = "SimpleEpEnergyManagement"
*.antenna[*].energyStorage.nominalCapacity = 1J
*.antenna[*].energyManagement.nodeShutdownCapacity = 0#0.1 * energyStorage.nominalCapacity
*.antenna[*].energyManagement.nodeStartCapacity = 0.5 * energyStorage.nominalCapacity
*.antenna[*].energyStorage.initialCapacity = energyStorage.nominalCapacity
*.antenna[*].energyGenerator.typename = "AlternatingEpEnergyGenerator"
*.antenna[*].energyGenerator.powerGeneration = 100mW
*.antenna[*].energyGenerator.sleepInterval = exponential(25s)
*.antenna[*].energyGenerator.generationInterval = exponential(25s)


*.antenna[*].mobility.typename = "BonnMotionMobility"
*.antenna[*].mobility.traceFile = "./movements/line.movements"
*.antenna[*].mobility.nodeId = -1


*.host[*].mobility.typename = "BonnMotionMobility"
#*.host[*].mobility.traceFile = ${mov="./movements/RWP-0.0.movements"}#"./movements/hostTeste.movements"
*.host[*].mobility.traceFile = ${mov="./movements/RWP-0.0.movements","./movements/RWP-0.5.movements","./movements/RPGM-0.0.movements","./movements/RPGM-0.5.movements","./movements/RWPRPGM-0.0.movements","./movements/RWPRPGM-0.5.movements"}
*.host[*].mobility.nodeId = -1


# Network parameters
#**.updateInterval = 20s   # Interval to update the satellite positions on the map
#**.satellite[*].mobilityType = "SatSGP4FisheyeMobility"

#**.constraintAreaMinX = 0m
#**.constraintAreaMaxX = 980m

#**.constraintAreaMinY = 0m
#**.constraintAreaMaxY = 980m

#**.constraintAreaMinZ = 0m
#**.constraintAreaMaxZ = 0m

#**.satellite[*].mobility.refCenterAltitude = 100        # Variable position of observer 
#**.satellite[*].mobility.refCenterLatitude = 47.53849   # Can be changed with user specific 
#**.satellite[*].mobility.refCenterLongitude = 19.03839  # position values
#
# Parameters for Satellite
#
# (default = 7dBW) Transmit power of satellites (Can be choosen individually for each satellite, see MCCs for example)
#*.satellite[*].transmitPower = 10dBW
# default = "", satelliteName is only used if a specific satellite from a TLE file should be used instead of the first numOfSats.
#*.satellite[0].satelliteName = "GPS BIIA-10 (PRN 32)"
#
# Parameters for Norad
#
# Provide the filename of the TLEs. Used by Webservice if GUI not used,
# must fit the names from http://celestrak.com/NORAD/elements/xxx.txt
#*.satellite[*].NoradModule.TLEfile = "gps-ops.txt"

########################################## Drone
# scene visualization

*.visualizer.osgVisualizer.typename = "IntegratedOsgVisualizer"
#*.host[*].osgModel = "car.osgb.100.scale"
*.visualizer.osgVisualizer.sceneVisualizer.clearColor = "skyblue"
*.visualizer.osgVisualizer.sceneVisualizer.sceneImage = "showcases/desert"
*.visualizer.osgVisualizer.sceneVisualizer.sceneImageSize = 5000m
*.visualizer.osgVisualizer.sceneVisualizer.axisLength = 1000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMinX = -2000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMinY = -2000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMinZ = 0m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMaxX = 3000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMaxY = 3000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMaxZ = 1000m

#**.drone[*].mobility.constraintAreaMinZ = 10m

# network node visualization: disable labels
*.visualizer.osgVisualizer.networkNodeVisualizer.displayModuleName = false

# mobility visualization
*.visualizer.*.mobilityVisualizer.displayMobility = true # master switch
*.visualizer.*.mobilityVisualizer.displayPositions = true
*.visualizer.*.mobilityVisualizer.displayOrientations = true
*.visualizer.*.mobilityVisualizer.displayVelocities = true
*.visualizer.*.mobilityVisualizer.displayMovementTrails = true
*.visualizer.*.mobilityVisualizer.animationSpeed = 1

# mobility constraint area
**.constraintAreaMinX = 0m
**.constraintAreaMinY = 0m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxX = 1000m
**.constraintAreaMaxY = 1000m
**.constraintAreaMaxZ = 200km

# no configurator needed (there is no communication between hosts)
#**.networkConfiguratorModule = ""
*.drone[*].osgModel = "3d/drone.ive.100.scale.0,0,90.rot"

*.drone[*].mobility.typename = "BonnMotionMobility"
#*.host[*].mobility.traceFile = ${mov="./movements/RPGM-0.0.movements","./movements/RPGM-0.5.movements","./movements/RWPRPGM-0.0.movements","./movements/RWPRPGM-0.5.movements"}
*.drone[*].mobility.traceFile = "./movements/DRONE.movements"#
*.drone[*].mobility.nodeId = -1
*.drone[*].mobility.is3D = true

*.drone[*].energyStorage.typename = "SimpleEpEnergyStorage"
*.drone[*].wlan[*].radio.energyConsumer.typename = "StateBasedEpEnergyConsumer"
*.drone[*].energyManagement.typename = "SimpleEpEnergyManagement"
*.drone[*].energyStorage.nominalCapacity = 1J
*.drone[*].energyManagement.nodeShutdownCapacity = 0#0.1 * energyStorage.nominalCapacity
*.drone[*].energyManagement.nodeStartCapacity = 1J
*.drone[*].energyStorage.initialCapacity = energyStorage.nominalCapacity
*.drone[*].energyGenerator.typename = "AlternatingEpEnergyGenerator"
*.drone[*].energyGenerator.powerGeneration = 100mW
*.drone[*].energyGenerator.sleepInterval = exponential(25s)
*.drone[*].energyGenerator.generationInterval = exponential(25s)

#*.drone[*].mobility.typename = "MassMobility"
#*.drone[*].mobility.changeInterval = 1s
#*.drone[*].mobility.initialMovementHeading = uniform(0deg, 360deg)
#*.drone[*].mobility.initialMovementElevation = uniform(-90deg, 90deg)
#*.drone[*].mobility.angleDelta = uniform(-10deg,10deg)
#*.drone[*].mobility.rotationAxisAngle = uniform(-10deg,10deg)
#*.drone[*].mobility.speed = uniform(10mps,20mps)
#*.drone[*].mobility.faceForward = false

#**.constraintAreaMinZ = 200m

##############################################Stellite
*.satellite[*].mobility.typename = "BonnMotionMobility"
#*.host[*].mobility.traceFile = ${mov="./movements/RPGM-0.0.movements","./movements/RPGM-0.5.movements","./movements/RWPRPGM-0.0.movements","./movements/RWPRPGM-0.5.movements"}
*.satellite[*].mobility.traceFile = "./movements/sat.movements"
*.satellite[*].mobility.nodeId = -1
*.satellite[*].mobility.is3D = true

*.satellite[*].energyStorage.typename = "SimpleEpEnergyStorage"
*.satellite[*].wlan[*].radio.energyConsumer.typename = "StateBasedEpEnergyConsumer"
*.satellite[*].energyManagement.typename = "SimpleEpEnergyManagement"
*.satellite[*].energyStorage.nominalCapacity = 1J
*.satellite[*].energyManagement.nodeShutdownCapacity = 0#0.1 * energyStorage.nominalCapacity
*.satellite[*].energyManagement.nodeStartCapacity = 1J
*.satellite[*].energyStorage.initialCapacity = energyStorage.nominalCapacity
*.satellite[*].energyGenerator.typename = "AlternatingEpEnergyGenerator"
*.satellite[*].energyGenerator.powerGeneration = 100mW
*.satellite[*].energyGenerator.sleepInterval = exponential(25s)
*.satellite[*].energyGenerator.generationInterval = exponential(25s)
#*.satellite[*].mobilityType = "SatSGP4FisheyeMobility"
#
#*.satellite[*].mobility.faceForward = false
#*.satellite[*].mobility.refCenterAltitude = 100        # Variable position of observer 
#*.satellite[*].mobility.refCenterLatitude = 47.53849   # Can be changed with user specific 
#*.satellite[*].mobility.refCenterLongitude = 19.03839  # position values
